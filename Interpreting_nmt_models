{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Interpreting_nmt_models","provenance":[],"collapsed_sections":[],"mount_file_id":"1ZA92AwNHQFe_7m7u5MYXTwbcnmZdqFa9","authorship_tag":"ABX9TyNJdbKcTQwO24typhKcMAP7"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WhVBqoYjbYpT","executionInfo":{"status":"ok","timestamp":1607300564180,"user_tz":300,"elapsed":302,"user":{"displayName":"Anjali Agrawal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHMsRh6AHHNkUZoLBw9KixeVpVnClzqmZrB8vpPA=s64","userId":"14279071542476640576"}},"outputId":"f0878d15-09e1-49c9-b150-55a7d41a718c"},"source":["cd /content/drive/MyDrive/DSGA_1011_NLP_Project"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content/drive/.shortcut-targets-by-id/119/DSGA_1011_NLP_Project\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KGCf3mFobyxv","executionInfo":{"status":"ok","timestamp":1607313609537,"user_tz":300,"elapsed":6388,"user":{"displayName":"Anjali Agrawal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHMsRh6AHHNkUZoLBw9KixeVpVnClzqmZrB8vpPA=s64","userId":"14279071542476640576"}},"outputId":"5a7fcb39-224b-4d9f-9d50-5d1cbcdf4d3b"},"source":["!python OpenNMT-py/translate.py -model Model/tedtalk_lstm_decay.pt -src Model/sample_spanish.txt \\\n","-replace_unk -attn_debug\n"],"execution_count":135,"outputs":[{"output_type":"stream","text":["[2020-12-07 04:00:08,393 INFO] Translating shard 0.\n","/usr/local/lib/python3.6/dist-packages/torchtext/data/example.py:52: UserWarning: Example class will be retired soon and moved to torchtext.legacy. Please see the most recent release notes for further information.\n","  warnings.warn('Example class will be retired soon and moved to torchtext.legacy. Please see the most recent release notes for further information.', UserWarning)\n","/usr/local/lib/python3.6/dist-packages/torchtext/data/iterator.py:48: UserWarning: OrderedIterator class will be retired soon and moved to torchtext.legacy. Please see the most recent release notes for further information.\n","  warnings.warn('{} class will be retired soon and moved to torchtext.legacy. Please see the most recent release notes for further information.'.format(self.__class__.__name__), UserWarning)\n","/usr/local/lib/python3.6/dist-packages/torchtext/data/batch.py:23: UserWarning: Batch class will be retired soon and moved to torchtext.legacy. Please see the most recent release notes for further information.\n","  warnings.warn('{} class will be retired soon and moved to torchtext.legacy. Please see the most recent release notes for further information.'.format(self.__class__.__name__), UserWarning)\n","/content/drive/.shortcut-targets-by-id/119/DSGA_1011_NLP_Project/OpenNMT-py/onmt/translate/beam_search.py:209: UserWarning: An output with one or more elements was resized since it had shape [5], which does not match the required output shape [1, 5].This behavior is deprecated, and in a future PyTorch release outputs will not be resized unless they have zero elements. You can explicitly reuse an out tensor t by resizing it, inplace, to zero elements with t.resize_(0). (Triggered internally at  /pytorch/aten/src/ATen/native/Resize.cpp:19.)\n","  torch.mul(self.topk_scores, length_penalty, out=self.topk_log_probs)\n","[2020-12-07 04:00:09,014 INFO]                    Él    decidió        ser    profeso \n","       And  0.2071324 *0.4865275  0.1643225  0.1420177 \n","        he  0.3031286 *0.5194683  0.1066449  0.0707582 \n","   decided  0.0869061 *0.7930282  0.1081955  0.0118702 \n","        to  0.0781842  0.0448986 *0.6570320  0.2198853 \n","        be  0.0005753  0.0419384 *0.5356917  0.4217946 \n","         a  0.0002136  0.0025115  0.0046351 *0.9926399 \n","  teacher.  0.0000057  0.0001885  0.0011883 *0.9986174 \n","      </s>  0.0071911  0.0170700  0.2196494 *0.7560895 \n","\n","[2020-12-07 04:00:09,015 INFO] PRED AVG SCORE: -0.0084, PRED PPL: 1.0084\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"nxXNfx7Nso3O","executionInfo":{"status":"ok","timestamp":1607313609538,"user_tz":300,"elapsed":3591,"user":{"displayName":"Anjali Agrawal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHMsRh6AHHNkUZoLBw9KixeVpVnClzqmZrB8vpPA=s64","userId":"14279071542476640576"}},"outputId":"fd85d4ab-cea9-4c41-eacb-9e6fd2505848"},"source":["import pandas as pd\n","data = pd.read_csv('attention_map.csv', encoding='utf-8',index_col=0)\n","data"],"execution_count":136,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Él</th>\n","      <th>decidió</th>\n","      <th>ser</th>\n","      <th>profesor.</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>And</th>\n","      <td>0.207132</td>\n","      <td>0.486528</td>\n","      <td>0.164322</td>\n","      <td>0.142018</td>\n","    </tr>\n","    <tr>\n","      <th>he</th>\n","      <td>0.303129</td>\n","      <td>0.519468</td>\n","      <td>0.106645</td>\n","      <td>0.070758</td>\n","    </tr>\n","    <tr>\n","      <th>decided</th>\n","      <td>0.086906</td>\n","      <td>0.793028</td>\n","      <td>0.108196</td>\n","      <td>0.011870</td>\n","    </tr>\n","    <tr>\n","      <th>to</th>\n","      <td>0.078184</td>\n","      <td>0.044899</td>\n","      <td>0.657032</td>\n","      <td>0.219885</td>\n","    </tr>\n","    <tr>\n","      <th>be</th>\n","      <td>0.000575</td>\n","      <td>0.041938</td>\n","      <td>0.535692</td>\n","      <td>0.421795</td>\n","    </tr>\n","    <tr>\n","      <th>a</th>\n","      <td>0.000214</td>\n","      <td>0.002511</td>\n","      <td>0.004635</td>\n","      <td>0.992640</td>\n","    </tr>\n","    <tr>\n","      <th>teacher.</th>\n","      <td>0.000006</td>\n","      <td>0.000188</td>\n","      <td>0.001188</td>\n","      <td>0.998617</td>\n","    </tr>\n","    <tr>\n","      <th>&lt;/s&gt;</th>\n","      <td>0.007191</td>\n","      <td>0.017070</td>\n","      <td>0.219649</td>\n","      <td>0.756090</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                Él   decidió       ser  profesor.\n","And       0.207132  0.486528  0.164322   0.142018\n","he        0.303129  0.519468  0.106645   0.070758\n","decided   0.086906  0.793028  0.108196   0.011870\n","to        0.078184  0.044899  0.657032   0.219885\n","be        0.000575  0.041938  0.535692   0.421795\n","a         0.000214  0.002511  0.004635   0.992640\n","teacher.  0.000006  0.000188  0.001188   0.998617\n","</s>      0.007191  0.017070  0.219649   0.756090"]},"metadata":{"tags":[]},"execution_count":136}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":269},"id":"qPBafKfL9lb9","executionInfo":{"status":"ok","timestamp":1607313527759,"user_tz":300,"elapsed":833,"user":{"displayName":"Anjali Agrawal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHMsRh6AHHNkUZoLBw9KixeVpVnClzqmZrB8vpPA=s64","userId":"14279071542476640576"}},"outputId":"1c791066-3547-4447-f8b5-6de205f3abce"},"source":["import numpy as np\n","import seaborn as sns\n","import matplotlib.pylab as plt\n","\n","ax = sns.heatmap(data, linewidth=0.5)\n","plt.savefig('ep_map.png')\n","plt.show()"],"execution_count":132,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"TepoXXTl6CaG","executionInfo":{"status":"ok","timestamp":1607313623620,"user_tz":300,"elapsed":707,"user":{"displayName":"Anjali Agrawal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHMsRh6AHHNkUZoLBw9KixeVpVnClzqmZrB8vpPA=s64","userId":"14279071542476640576"}},"outputId":"d71d295e-c04a-4528-8218-9a0d14817f19"},"source":["import numpy as np\n","import seaborn as sns\n","import matplotlib.pylab as plt\n","\n","ax = sns.heatmap(data, linewidth=0.5)\n","plt.savefig('tt_map.png')\n","plt.show()"],"execution_count":137,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"gWwelCC56rrg"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9LvyRlgslMns","executionInfo":{"status":"ok","timestamp":1607300850241,"user_tz":300,"elapsed":136041,"user":{"displayName":"Anjali Agrawal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHMsRh6AHHNkUZoLBw9KixeVpVnClzqmZrB8vpPA=s64","userId":"14279071542476640576"}},"outputId":"4956d3a4-77ff-42e3-9e20-5c82a1546781"},"source":["!pip install git+https://github.com/pytorch/text"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting git+https://github.com/pytorch/text\n","  Cloning https://github.com/pytorch/text to /tmp/pip-req-build-byh1ombl\n","  Running command git clone -q https://github.com/pytorch/text /tmp/pip-req-build-byh1ombl\n","  Running command git submodule update --init --recursive -q\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.6/dist-packages (from torchtext==0.9.0a0+ec413ff) (4.41.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from torchtext==0.9.0a0+ec413ff) (2.23.0)\n","Requirement already satisfied: torch in /usr/local/lib/python3.6/dist-packages (from torchtext==0.9.0a0+ec413ff) (1.7.0+cu101)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from torchtext==0.9.0a0+ec413ff) (1.18.5)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->torchtext==0.9.0a0+ec413ff) (2020.11.8)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->torchtext==0.9.0a0+ec413ff) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->torchtext==0.9.0a0+ec413ff) (2.10)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->torchtext==0.9.0a0+ec413ff) (1.24.3)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.6/dist-packages (from torch->torchtext==0.9.0a0+ec413ff) (3.7.4.3)\n","Requirement already satisfied: dataclasses in /usr/local/lib/python3.6/dist-packages (from torch->torchtext==0.9.0a0+ec413ff) (0.8)\n","Requirement already satisfied: future in /usr/local/lib/python3.6/dist-packages (from torch->torchtext==0.9.0a0+ec413ff) (0.16.0)\n","Building wheels for collected packages: torchtext\n","  Building wheel for torchtext (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for torchtext: filename=torchtext-0.9.0a0+ec413ff-cp36-cp36m-linux_x86_64.whl size=7060969 sha256=c3647d7f5e8fae7b5cb9f2ee9a28e98ec97614fcac0d2eef1fe4994006afdf14\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-0yoc7v4q/wheels/73/14/71/ed033fd999ae4933e17df3e91be2014e61c2f312a88a164ff5\n","Successfully built torchtext\n","Installing collected packages: torchtext\n","  Found existing installation: torchtext 0.3.1\n","    Uninstalling torchtext-0.3.1:\n","      Successfully uninstalled torchtext-0.3.1\n","Successfully installed torchtext-0.9.0a0+ec413ff\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BLHU5uRjkj48","executionInfo":{"status":"ok","timestamp":1607300509969,"user_tz":300,"elapsed":4490,"user":{"displayName":"Anjali Agrawal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHMsRh6AHHNkUZoLBw9KixeVpVnClzqmZrB8vpPA=s64","userId":"14279071542476640576"}},"outputId":"96363284-760a-4cc2-939b-cde6506a9b4f"},"source":["!pip install configargparse"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting configargparse\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/bb/79/3045743bb26ca2e44a1d317c37395462bfed82dbbd38e69a3280b63696ce/ConfigArgParse-1.2.3.tar.gz (42kB)\n","\r\u001b[K     |███████▊                        | 10kB 12.5MB/s eta 0:00:01\r\u001b[K     |███████████████▍                | 20kB 16.8MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 30kB 12.1MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▊ | 40kB 8.1MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 51kB 2.9MB/s \n","\u001b[?25hBuilding wheels for collected packages: configargparse\n","  Building wheel for configargparse (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for configargparse: filename=ConfigArgParse-1.2.3-cp36-none-any.whl size=19329 sha256=04e3311b5fa332ff59ba0cb61bec037ed7a59d1e08b96332262401a7e0afd9af\n","  Stored in directory: /root/.cache/pip/wheels/bd/d6/53/034032da9498bda2385cd50a51a289e88090b5da2d592b1fdf\n","Successfully built configargparse\n","Installing collected packages: configargparse\n","Successfully installed configargparse-1.2.3\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8EY_ZmNDkx-r"},"source":[""],"execution_count":null,"outputs":[]}]}